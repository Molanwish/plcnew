# Cline Rules for Weighing System Project

## 项目知识

### 项目阶段
- 项目分为四个阶段：数据基础设施、微调控制器、智能分析引擎、可视化与用户交互
- 阶段一（数据基础设施）和阶段二（微调控制器）已经完成
- 当前正在开始阶段三（智能分析引擎）的开发

### 代码组织
- 主要代码在 `src/` 目录下
- `src/adaptive_algorithm/` 包含自适应控制算法
- `src/adaptive_algorithm/learning_system/` 包含学习系统代码
- 测试文件通常与实现文件位于同一目录，命名为 `test_*.py`

### 数据库结构
- 学习系统使用SQLite数据库存储数据
- 主要表包括 `PackagingRecords`、`ParameterAdjustments`、`SensitivityResults`和`FallbackEvents`
- `FallbackEvents`表包含`hopper_id`、`timestamp`、`reason`、`manual`、`previous_parameters`、`fallback_parameters`和`notes`字段
- 需要使用`get_fallback_events`方法获取基本回退事件信息
- 需要使用`get_fallback_events_extended`方法获取包含参数详情的扩展回退事件信息

### 微调控制器特性
- 微调控制器通过检测参数震荡和性能退化来优化控制效果
- 震荡检测逻辑会监控参数变化方向，计算震荡次数
- 当震荡达到阈值时，会触发冷却期，暂停参数调整
- 回退机制会在连续性能不佳时，自动回退到之前保存的安全参数
- 参数边界计算确保参数在物理约束范围内，防止极端参数设置

### 性能指标
- 系统使用三个主要指标评估性能：精度、稳定性和总分
- 精度指标基于实际重量与目标重量的差异
- 稳定性指标基于重量波动的一致性
- 总分是精度和稳定性的加权组合

## 项目偏好

### 编码风格
- 使用Google Python风格指南
- 函数和方法使用下划线命名法（snake_case）
- 类使用驼峰命名法（CamelCase）
- 常量使用全大写加下划线
- 每个类和函数应有描述性的文档字符串

### 测试偏好
- 创建完整的单元测试，覆盖所有主要功能
- 使用模拟数据进行测试，避免依赖真实硬件
- 测试文件应与源文件位于同一目录
- 测试命名应为`test_<功能名称>.py`
- 在进行大改动前先编写测试用例

### 接口设计
- 一致的方法命名（如`save_*`, `get_*`, `analyze_*`）
- 所有公共API必须有完整的文档字符串
- 参数应有明确的类型注释
- 尽量减少API变更对现有代码的影响
- 使用工厂方法或依赖注入来提高可测试性

### 代码质量
- 代码的可读性优先于简洁性
- 适当添加注释说明复杂逻辑
- 进行错误处理和输入验证
- 密切关注性能关键区域的效率

## 最近发现

### 技术限制
- PLC设备对feeding_speed_coarse和feeding_speed_fine参数有50的上限
- sqlite3在多线程环境下需要特别处理
- 时间戳处理需要支持多种格式（ISO字符串和Unix时间戳）

### 已解决问题
- 修复了震荡检测逻辑中的条件过于严格的问题
- 解决了回退事件记录中的数据库结构问题
- 修复了`hopper_id`为None时导致的数据库约束错误
- 优化了时间戳解析逻辑，支持多种格式

### 待开发的优先功能
- 参数敏感度分析引擎
- 物料特性识别系统
- 基于历史数据的参数优化推荐
- 分析结果可视化展示

## 开发工具和环境

### 开发环境
- 主要使用Python 3.8+
- 使用SQLite作为数据库
- 使用pandas进行数据分析
- 使用matplotlib进行数据可视化

### 测试工具
- 使用pytest进行单元测试
- 使用模拟器进行系统测试

### 调试技巧
- 使用logging模块记录关键信息
- 在开发过程中启用详细日志级别
- 使用断点和调试工具分析复杂问题

## 特殊处理

### 错误处理
- 通信错误应当重试几次后再放弃
- 数据库操作应当使用事务确保一致性
- 参数调整应当在安全边界内

### 性能优化
- 批量处理数据库操作
- 限制历史数据分析的数据量
- 在后台线程中执行耗时操作

### 特殊案例
- 处理参数震荡情况：检测并触发冷却期
- 处理性能持续下降：触发参数回退
- 处理硬件通信中断：记录错误并尝试恢复

## 导入路径规范

1. **相对导入优先**
   - 在模块内部导入时，优先使用相对导入
   - 示例: `from ..data_repository import LearningDataRepository`而非`from adaptive_algorithm.learning_system.data_repository import LearningDataRepository`

2. **导入路径规范**
   - 同级目录导入: `from .module_name import XXX`
   - 父级目录导入: `from .. import XXX`或`from ..module_name import XXX`
   - 父级的父级目录导入: `from ... import XXX`或`from ...module_name import XXX`

3. **包级别导入**
   - 所有包必须有`__init__.py`文件
   - 在`__init__.py`中导出主要类和函数，方便上层导入
   - 示例: 在`learning_system/__init__.py`中添加`from .data_repository import LearningDataRepository`

4. **绝对导入场景**
   - 只在顶层脚本（如run_sensitivity_system.py）使用绝对导入
   - 使用`sys.path`调整时必须有明确注释说明原因
   - 使用绝对导入时确保从项目根目录开始

## 线程安全规则

1. **共享资源保护**
   - 所有共享资源必须使用锁保护
   - 数据库连接必须使用连接池并确保线程安全
   - 共享数据结构应使用线程安全的替代品（如Queue代替list）

2. **锁使用规范**
   - 使用细粒度锁，避免粗粒度锁导致性能问题
   - 按照一致的顺序获取多个锁，避免死锁
   - 尽可能减少锁的持有时间

3. **线程安全模式**
   - 监控线程应设为守护线程（daemon=True）
   - 使用Event对象进行线程同步而非sleep循环
   - 长时间操作应支持取消机制

4. **异步操作规范**
   - 长时间操作应在单独线程中执行
   - 使用回调机制通知操作完成
   - 提供进度反馈机制

## 错误处理规范

1. **异常处理层次**
   - 底层：捕获具体异常，进行详细日志记录，可能尝试恢复
   - 中层：将底层异常转换为业务相关异常，添加上下文信息
   - 顶层：实现全局异常处理，确保用户友好的错误展示

2. **重试机制**
   - 网络和IO操作应实现自动重试
   - 使用指数退避算法增加重试间隔
   - 设置最大重试次数，避免无限重试

3. **错误日志规范**
   - 记录异常的完整堆栈信息
   - 包含足够的上下文信息便于问题定位
   - 敏感信息（如密码）不应出现在日志中

## 数据库操作规范

1. **连接管理**
   - 使用连接池管理数据库连接
   - 操作完成后立即释放连接回池
   - 长事务应设置超时时间

2. **查询优化**
   - 使用参数化查询避免SQL注入
   - 只查询必要的字段，避免`SELECT *`
   - 大结果集应使用分页查询

3. **事务管理**
   - 使用`with`语句确保事务正确提交或回滚
   - 长事务拆分为多个小事务
   - 避免跨线程使用同一事务

## 配置管理规范

1. **配置分层**
   - 默认配置：硬编码在代码中的兜底配置
   - 文件配置：从JSON/YAML文件加载的配置
   - 环境变量：可覆盖文件配置的环境变量
   - 运行时配置：用户在运行时提供的配置（优先级最高）

2. **配置验证**
   - 所有配置项必须有类型和范围验证
   - 提供有意义的默认值
   - 关键配置缺失应给出明确错误信息

3. **配置文档**
   - 所有配置项必须有注释说明用途和取值范围
   - 提供配置示例文件
   - 记录配置项的依赖关系

## 代码风格规范

1. **命名规范**
   - 类名：使用大驼峰命名法（CamelCase）
   - 方法和变量：使用小驼峰命名法（camelCase）
   - 常量：使用全大写下划线分隔（UPPER_CASE）
   - 私有方法和属性：使用下划线前缀（_method_name）

2. **注释规范**
   - 类和方法必须有文档字符串（docstring）
   - 复杂逻辑必须有行内注释
   - 注释应解释"为什么"而非"是什么"

3. **代码格式**
   - 行长度不超过100字符
   - 使用4空格缩进
   - 函数和类之间空两行，方法之间空一行

## 性能优化规则

1. **数据处理优化**
   - 大数据集处理应实现批处理
   - 计算密集型任务应考虑并行处理
   - 结果缓存避免重复计算

2. **内存管理**
   - 处理大数据时使用生成器或迭代器
   - 主动清理不再使用的大对象
   - 避免循环引用导致的内存泄漏

3. **IO优化**
   - 使用异步IO处理网络和文件操作
   - 实现数据批量读写减少IO次数
   - 添加适当的缓存减少重复IO

## 测试规范

1. **单元测试要求**
   - 核心功能测试覆盖率不低于90%
   - 测试应包括正常路径、边界条件和异常情况
   - 使用mock隔离外部依赖

2. **集成测试要求**
   - 测试主要功能流程的端到端执行
   - 使用测试数据而非生产数据
   - 验证组件间协作和数据流转

3. **性能测试要求**
   - 建立关键操作的性能基准
   - 测试不同数据量下的系统表现
   - 验证并发情况下的系统稳定性

## 项目特有规则

1. **敏感度分析系统参数规范**
   - 分析窗口大小(window_size)默认值为10
   - 触发分析的最小记录数不应小于30
   - 性能下降触发阈值默认为15%

2. **控制器参数约束**
   - 速度参数(feeding_speed)不得超过50
   - 参数调整幅度不应超过当前值的20%
   - 安全边界必须确保最小值小于最大值

3. **系统操作模式**
   - 测试模式：使用模拟数据运行系统
   - 演示模式：使用预设数据展示功能
   - 正常模式：连接实际数据源运行
   - 每种模式必须有明确的日志标识